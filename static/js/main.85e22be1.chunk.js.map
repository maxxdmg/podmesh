{"version":3,"sources":["Components/Podcast/Episode/index.js","Components/Podcast/Podcast.js","Components/ControlPanel/index.js","Components/Navbar/index.js","Components/Message/index.js","Components/Spinner/index.js","Components/Error/index.js","App.js","serviceWorker.js","index.js"],"names":["Episode","props","react_default","a","createElement","className","title","date","controls","src","media","Podcast","style","minWidth","maxWidth","height","this","podThumbnail","alt","onError","imgBroken","Podcast_Episode","podDate","podTitle","podMedia","Component","ControlPanel","placeholder","aria-label","onChange","inputChange","onClick","enterHandler","width","index_esm","href","size","Navbar","Components_ControlPanel","inputText","Message","text","msgText","msgUpdated","msgHeader","Spinner","ErrorMsg","role","errText","App","state","podNumCap","podNum","podcasts","owner","lastUpdated","feed","currentFeed","loading","error","getFeed","url","_this","setState","target","encodeURI","fetch","then","res","txt","doc","JSON","parse","status","items","enclosure","type","catch","err","parseDate","ret","i","parsePodcastDate","podcast","year","slice","month","day","Object","objectSpread","generateKey","randA","Math","floor","random","randB","randC","String","imageBroken","dateCompare","pod1","pod2","yearCompare","monthCompare","dayCompare","enterFeedHandler","_callee","numEpisodes","mediaUrl","thumbnail","newEpisode","regenerator_default","wrap","_context","prev","next","sent","abrupt","link","image","pubDate","push","stop","newFeedHandler","e","value","addFeed","concat","toConsumableArray","nextProps","nextState","_this2","message","Components_Message","Components_Spinner","Error","length","podcastList","sort","map","p","Components_Podcast_Podcast","key","Components_Navbar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.85e22be1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nlet Episode = props => {\r\n\treturn (\r\n\t\t<div className=\"card-body shadow-sm bg-dark rounded-right\r\n\t\td-flex flex-column align-items-start text-white\">\r\n\t\t\t<strong \r\n\t\t\t\tclassName=\"mb-0\">\r\n\t\t\t\t{props.title}\r\n\t\t\t</strong>\r\n\t\t\t<div \r\n\t\t\t\tclassName=\"mb-0\">\r\n\t\t\t\t{props.date}\r\n\t\t\t</div>\r\n\t\t\t<audio \r\n\t\t\t\tclassName=\"w-100\"\r\n\t\t\t\tcontrols\r\n\t\t\t\tsrc={props.media} />\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Episode;","import React, {Component} from 'react';\r\nimport Episode from './Episode';\r\n\r\nclass Podcast extends Component {\r\n\r\n\trender (){\r\n\t\treturn (\r\n\t\t\t<div className=\"col-md-12\">\r\n\t\t\t\t<div className=\"card flex-md-row mb-4 box-shadow h-md-250\">\r\n\t\t\t\t\t<img \r\n\t\t\t\t\t\tclassName=\"card-img-left rounded-left p-0 border-none flex-auto d-none d-md-block\"\r\n\t\t\t\t\t\tstyle={{minWidth: \"8.5vw\", maxWidth: \"25.6vw\", height: \"128px\"}}\r\n\t\t\t\t\t\tsrc={this.props.podThumbnail} \r\n\t\t\t\t  \t\talt={\"broken!\"}\r\n\t\t\t\t  \t\tonError={this.props.imgBroken} />\r\n\t\t\t\t  \t<Episode \r\n\t\t\t  \t\t\tdate={this.props.podDate}\r\n\t\t\t  \t\t\ttitle={this.props.podTitle} \r\n\t\t\t  \t\t\tmedia={this.props.podMedia} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Podcast;","import React from 'react';\r\nimport { FaUndo } from 'react-icons/fa';\r\nimport { FaGithubSquare} from 'react-icons/fa';\r\n\r\nconst ControlPanel = props => {\r\n\treturn (\r\n\t\t  <div className=\"form-inline\">\r\n\t\t    <input \r\n\t\t    \tclassName=\"form-control mr-sm-3 ml-sm-3\" \r\n\t\t    \tplaceholder=\"RSS Feed URL\" \r\n\t\t    \taria-label=\"FeedURL\" \r\n\t\t    \tonChange={props.inputChange} />\r\n\t\t    <button \r\n\t\t    \tonClick={props.enterHandler}\r\n\t\t    \tstyle={{height: \"2.5em\"}}\r\n\t\t    \tclassName=\"btn btn-outline-success my-2 my-sm-0 mr-sm-3\">\r\n\t\t    \tEnter\r\n\t\t    </button>\r\n\t\t    \r\n\t\t    <button \r\n\t\t    \tclassName=\"btn btn-outline-warning mr-sm-3\"\r\n\t\t    \tstyle={{width:\"2.5em\", height: \"2.5em\"}} > \r\n\t\t    \t<FaUndo className=\"mb-1\" /> \r\n\t\t    </button>\r\n\t\t\r\n\t\t    <a href=\"https://github.com/maxxdmg/podmesh\"> \r\n\t\t    \t<FaGithubSquare size=\"2.85em\" /> \r\n\t\t    </a> \r\n\r\n\t\t  </div>\r\n\t\t)\r\n}\r\n\r\nexport default ControlPanel;","import React from 'react';\r\nimport ControlPanel from '../ControlPanel';\r\n\r\nconst Navbar = props => {\r\n\treturn (\r\n\t\t<nav className=\"navbar navbar-dark bg-dark row\">\r\n\t\t\t<div className=\"col col-md-1 col-0\" />\t\r\n\t\t\t<div className=\"col col-md-auto col-2\">\r\n\t\t\t\t<h1 className=\"navbar-brand\">Podmesh</h1>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"col col-md-auto col-0\" />\r\n\t\t\t<div className=\"col col-md-auto col-7\">\r\n\t\t\t\t<ControlPanel \r\n\t\t\t\t\tinputText={props.inputText}\r\n\t\t\t\t\tinputChange={props.inputChange} \r\n\t\t\t\t\tenterHandler={props.enterHandler} />\t\r\n\t\t\t</div>\t\r\n\t\t\t<div className=\"col col-md-1 col-0\" />\r\n\t\t</nav>\r\n\t\r\n\t\t)\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nlet Message = props => {\r\n\tlet text = <p className=\"lead\"> {props.msgText} </p>;\r\n\tif (props.msgUpdated) \r\n\t\ttext = (<div>\r\n\t\t\t   \t\t<p className=\"lead\">{props.msgText}</p>\r\n\t\t\t   \t\t<div className=\"w-100\" />\r\n\t\t\t   \t\t<p className=\"lead\">{props.msgUpdated}</p>\r\n\t\t\t   \t</div>)\r\n\r\n\treturn (\r\n\t\t<div className=\"jumbotron shadow p-3 p-md-5 mt-3 text-white rounded bg-dark\">\r\n\t\t\t<h1 className=\"display-4\">{props.msgHeader}</h1>\r\n\t\t\t{text}\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nlet Spinner = props =>{\r\n\treturn (\r\n\t\t<div className=\"loader\" />\r\n\t\t)\r\n}\r\n\r\nexport default Spinner;","import React from 'react';\r\n\r\nconst ErrorMsg = props => {\r\n\treturn (\r\n\t\t<div className=\"alert alert-danger mt-3\" role=\"alert\">\r\n  \t\t\t<h4>{props.errText}</h4>\r\n\t\t</div>\r\n\t)\r\n} \r\n\r\nexport default ErrorMsg;","import React, {Component} from 'react'\nimport Podcast from './Components/Podcast/Podcast'\nimport Navbar from './Components/Navbar'\nimport Message from './Components/Message'\nimport Spinner from './Components/Spinner'\nimport ErrorMsg from './Components/Error'\n\nclass App extends Component {\n  state = {\n    podNumCap: 10,\n    podNum: 0,\n    podcasts: [],\n    owner: \"\",\n    lastUpdated: \"\",\n    feed: [\n      'http://feeds.twit.tv/sn.xml', \n      'http://lpotl.libsyn.com/rss',\n      'https://rss.art19.com/hello-from-the-magic-tavern',\n      'http://wizbru.libsyn.com/rss'\n      ],\n    currentFeed: '',\n    loading: false,\n    error: null\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.currentFeed !== nextState.currentFeed)\n      return false\n    else return true;\n  }\n\n  getFeed = (url) => {\n    this.setState({loading:true, podcasts: []})\n    // complete the api target url\n    let target = 'https://api.rss2json.com/v1/api.json?rss_url=' + encodeURI(url)\n    return fetch(target).then(res => {\n      return res.text().then(txt => {\n        // set up DOMParser and podcast attribute variables\n          let doc = JSON.parse(txt)\n\n          if (doc.status !== \"ok\"){\n            this.setState({\n              podcasts: [],\n              \n              error: \"Invalid url. Are you sure it is an rss feed?\"}) \n          } else if (doc.items[0].enclosure.type !== \"audio/mpeg\") {\n            this.setState({\n              podcasts: [],\n              \n              error: \"Invalid rss feed. Must be a podcast rss feed\"}) \n          }\n\n          return doc;        \n      // catch errors\n      }).catch(err => this.setState({error: err}))\n    }).catch(err => this.setState({error: err}))\n  }\n\n  parseDate = date => {\n    const chars = 10;\n    let ret = \"\";\n\n    for (let i=0; i<chars; i++) {\n      ret += date[i];\n    }\n    return ret;\n  }\n\n  parsePodcastDate = (podcast) => {\n    let date = podcast.date;\n    let year = date.slice(0, 4);\n    let month = date.slice(5,7);\n    let day = date.slice(8, 10);\n    \n    return {...podcast, year, month, day}\n  }\n\n  generateKey = (podTitle, podDate) => {\n    let max = 10000;\n    let min = 100;\n\n    let randA = Math.floor(Math.random() * (max - min)) + min;\n    let randB = Math.floor(Math.random() * (max - min)) + min;\n    let randC = Math.floor(Math.random() * (max - min)) + min;\n\n    return String(podTitle) + String(podDate) + String(randA) + String(randB) + String(randC);\n  }\n\n  imageBroken = () => \"Image Unavailable\"\n\n  dateCompare = (pod1, pod2) => {\n    let yearCompare = pod2.year - pod1.year;\n    \n    if (yearCompare === 0) {\n      let monthCompare = pod2.month - pod1.month;\n\n      if (monthCompare === 0) {\n        let dayCompare = pod2.day - pod1.day;\n\n        if (dayCompare === 0)\n          return 0\n        else\n          return dayCompare\n      } else\n        return monthCompare\n    } else\n      return yearCompare\n  }\n\n  enterFeedHandler = async (url, numEpisodes) => {\n    let feed = await this.getFeed(url);\n    if (feed.status !== \"ok\" || feed.items[0].enclosure.type !== \"audio/mpeg\")\n            return;\n\n    let podcasts = [];\n    let podNum = 0;\n    let owner = feed.feed.title;\n    let lastUpdated = \"\";\n\n    for (let i=0; i<numEpisodes; i++) {\n      let title = feed.items[i].title;\n      let mediaUrl = feed.items[i].enclosure.link\n      let thumbnail = feed.feed.image;\n      let date = feed.items[i].pubDate\n      // get most recent episode for 'last updated' state\n      if (i === 0) lastUpdated = this.parseDate(date);\n\n      let newEpisode = {owner, title, date, mediaUrl, thumbnail}\n      newEpisode = this.parsePodcastDate(newEpisode);\n      podNum++;\n      podcasts.push(newEpisode);\n    }\n\n    this.setState({\n      podcasts, owner, lastUpdated, podNum, \n      loading: false,\n      error: null})\n  }\n\n  newFeedHandler = e => this.setState({currentFeed: e.target.value});\n  addFeed = url => this.setState({feed: [...this.state.feed, url]});\n\n  render () {\n    let podcasts = null; \n\n    let message = <Message\n                      msgHeader=\"No podcast feed loaded\" \n                      msgText=\"Enter the rss url of a podcast to view and listen to it's feed\"/>;\n    if (this.state.loading) {\n      message = <Spinner />\n    }\n\n\n    let err = null;\n    if (this.state.error) {\n      err = <ErrorMsg errText={this.state.error} />\n    }\n\n    if (this.state.podcasts.length && !this.state.loading) {\n      let podcastList = this.state.podcasts.sort(this.dateCompare);\n\n      let msgHeader = \"loaded feed for '\" + this.state.owner + \"'\";\n      let msgText = \"Displaying \" + this.state.podNum + \" episodes \\n\";\n      let msgUpdated = \"Last updated \" + this.state.lastUpdated + \"\\n\";\n      message = <Message \n                  msgHeader={msgHeader} \n                  msgText={msgText} \n                  msgUpdated={msgUpdated} />\n\n      podcasts = podcastList.map(p => \n        <Podcast \n          key={this.generateKey(p.title, p.date)}\n          imgBroken={this.imageBroken}\n          podTitle={p.title} \n          podMedia={p.mediaUrl}\n          podThumbnail={p.thumbnail}\n          podDate={this.parseDate(p.date)} />\n      )\n    }\n\n    return (\n      <div>\n        <Navbar\n          inputText={this.state.currentFeed}\n          inputChange={this.newFeedHandler}\n          enterHandler={() => this.enterFeedHandler(this.state.currentFeed, 10)} />\n        <div className=\"container\">\n          {err}\n          {message}\n          <div className=\"row mb-2\">\n            {podcasts}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}